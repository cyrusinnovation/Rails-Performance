class Tweet
  include ActiveRedis

  define_fields :text
  belongs_to :user

  #not generic
  def self.delete_all
    (0..redis_db.get("#{table_name}:counter").to_i).map do |id|
      redis_db.del "#{table_name}:#{id}:text"
      redis_db.del "#{table_name}:#{id}:id"
      redis_db.del "#{table_name}:#{id}:user_id"
    end

    user.all.each do |user|
      user.delete_tweets
    end

    redis_db.set "#{table_name}:counter", 0
  end

  #move to define fields
  def text
    @text ||= redis_db.get("#{table_name}:#{@id}:text")
  end

  #move to belongs to
  def user
    @user ||= User.find(redis_db.get "#{table_name}:#{@id}:user_id")
  end

  #check that the tweet exists
  #shouldn't always return a tweet
  def self.find id
    Tweet.new({id: id.to_i})
  end

end
